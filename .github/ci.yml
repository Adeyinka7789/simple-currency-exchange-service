# GitHub Actions Workflow for Continuous Integration (CI)
name: Django CI/Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    # Define services needed for the Django application (DB and Cache/Broker)
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ciuser
          POSTGRES_PASSWORD: cipassword
          POSTGRES_DB: cidb
        ports:
          - 5432:5432
        # Health check to wait until Postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --name redis_broker

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies from your requirements.txt
        pip install Django djangorestframework psycopg2-binary python-decouple celery redis django-redis django-celery-beat requests
        
    - name: Set environment variables for CI
      # These variables link the Django app to the services started above
      run: |
        echo "DATABASE_URL=postgres://ciuser:cipassword@localhost:5432/cidb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=ci-dummy-key" >> $GITHUB_ENV
        echo "FX_API_KEY=dummy-ci-key" >> $GITHUB_ENV

    - name: Run Migrations
      # Note: We run migrations before tests to set up the CI database schema
      run: python manage.py migrate

    - name: Run Tests (placeholder for future implementation)
      # You will add your test cases here later.
      run: python manage.py test --failfast
